const express = require("express");
const bcrypt = require("bcrypt");
const jwt = require("jsonwebtoken");
const User = require("../models/User");
require("dotenv").config();

const router = express.Router();

// üîπ Route d'inscription
router.post("/register", async (req, res) => {
  try {
    console.log("üîπ Requ√™te re√ßue :", req.body);

    const { pseudo, email, password } = req.body;

    // V√©rifier si tous les champs sont remplis
    if (!pseudo || !email || !password) {
      console.log("‚ùå Champs manquants !");
      return res.status(400).json({ message: "Tous les champs sont requis" });
    }

    // V√©rifier si l'utilisateur existe d√©j√†
    let user = await User.findOne({ email });
    if (user) {
      console.log("‚ùå Email d√©j√† utilis√© !");
      return res.status(400).json({ message: "Email d√©j√† utilis√©" });
    }

    // Hasher le mot de passe
    const salt = await bcrypt.genSalt(10);
    const hashedPassword = await bcrypt.hash(password, salt);
    console.log("üîë Mot de passe hash√© avec succ√®s.");

    // Cr√©er un nouvel utilisateur avec des cr√©dits et des r√©servations vides
    user = new User({ 
      pseudo, 
      email, 
      password: hashedPassword, 
      credits: 20, 
      reservations: [] 
    });

    await user.save();
    console.log("‚úÖ Utilisateur enregistr√© :", user);

    res.status(201).json({ message: "Utilisateur cr√©√© avec succ√®s !", userId: user._id });
  } catch (err) {
    console.error("‚ùå Erreur serveur lors de l'inscription :", err);
    res.status(500).json({ message: "Erreur serveur", error: err });
  }
});

// üîπ Route de connexion
router.post("/login", async (req, res) => {
  try {
    console.log("üîπ Tentative de connexion :", req.body.email);

    const { email, password } = req.body;

    // V√©rifier si l'utilisateur existe
    const user = await User.findOne({ email });
    if (!user) {
      console.log("‚ùå Utilisateur non trouv√© !");
      return res.status(400).json({ message: "Utilisateur non trouv√©" });
    }

    // V√©rifier le mot de passe
    const isMatch = await bcrypt.compare(password, user.password);
    if (!isMatch) {
      console.log("‚ùå Mot de passe incorrect !");
      return res.status(400).json({ message: "Mot de passe incorrect" });
    }

    // G√©n√©rer un token JWT
    const token = jwt.sign({ id: user._id }, process.env.JWT_SECRET, { expiresIn: "1h" });

    console.log("‚úÖ Connexion r√©ussie :", user.pseudo);
    res.json({ token, user: { pseudo: user.pseudo, email: user.email, credits: user.credits } });
  } catch (err) {
    console.error("‚ùå Erreur serveur lors de la connexion :", err);
    res.status(500).json({ message: "Erreur serveur" });
  }
});

module.exports = router;
